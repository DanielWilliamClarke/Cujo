# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  node: circleci/node@5.0.3
  rust: circleci/rust@1.6.0

parameters:
  build-service:
    type: boolean
    default: false
  build-portfolio:
    type: boolean
    default: false

jobs:
  test-build-push-rust:
    docker:
      - image: cimg/rust:1.66.0
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Dependencies
          command: |
            cargo --version
            rustup default nightly
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates libssl-dev
            cargo install cargo2junit
      - run:
          name: Run Tests
          command: |
            cd service
            cargo test -- -Z unstable-options --format json | cargo2junit > results.xml
      - store_test_results:
          path: ./service
      - run:
          name: Build Docker image
          command: |
            cd service
            docker build -t $DOCKER_REGISTRY/$IMAGE_NAME_RUST:latest .
      - run:
          name: Publish Docker Image
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $DOCKER_REGISTRY/$IMAGE_NAME_RUST:latest

  test-build-push-portfolio:
    docker:
      - image: cimg/node:18.4.0
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.17
          # version: 19.03.13 # https://support.circleci.com/hc/en-us/articles/360050934711-Docker-build-fails-with-EPERM-operation-not-permitted-copyfile-when-using-node-14-9-0-or-later-
      # - run:
      #     name: Run tests
      #     command: |
      #       cd portfolio
      #       npm install
      #       npm run test -- --watchAll=false --passWithNoTests
      #       npm run build:ci
      # - store_test_results:
      #     path: ./portfolio
      - run:
          name: Build Docker image
          command: |
            cd portfolio_next
            docker build -t $DOCKER_REGISTRY/$IMAGE_NAME_PORTFOLIO:latest --build-arg CUJO_SERVICE_URL="$CUJO_SERVICE_URL" .
      - run:
          name: Publish Docker Image
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $DOCKER_REGISTRY/$IMAGE_NAME_PORTFOLIO:latest

workflows:
  rust:
    when: << pipeline.parameters.build-service >>
    jobs:
      - test-build-push-rust:
          filters:
            branches:
              only: master

  portfolio:
    when: << pipeline.parameters.build-portfolio >>
    jobs:
      - test-build-push-portfolio:
          filters:
            branches:
              only: master
